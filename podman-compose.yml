services:

  nginx:
    image: docker.io/library/nginx:alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health", "-o", "/dev/null", "-s", "-w", "%{http_code}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - n8n
      - zep
      - weaviate
    networks:
      - frontend-network
      - backend-network

  n8n:
    build:
      context: .
      dockerfile: Dockerfile.n8n
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8n
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - WEBHOOK_URL=http://localhost:5678/
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - N8N_CACHE_ENABLED=true
      - N8N_CACHE_TYPE=redis
      - N8N_REDIS_HOST=redis
      - N8N_REDIS_PORT=6379
      - N8N_REDIS_PASSWORD=${REDIS_PASSWORD}
      - N8N_DEFAULT_CONCURRENCY=5
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
#      - EXECUTIONS_PROCESS=main
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/home/node/.n8n/workflows
      - ./lib:/home/node/.n8n/lib
      - ./logs/n8n:/home/node/.n8n/logs
    depends_on:
      - postgres
      - redis
    networks:
      - backend-network
      - database-network

  postgres:
    image: docker.io/library/postgres:17-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=n8n
      - POSTGRES_DB=n8n
      - POSTGRES_HOST_AUTH_METHOD=trust
      - PGDATA=/var/lib/postgresql/data/pgdata
      - MAX_CONNECTIONS=100
      - SHARED_BUFFERS=256MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-custom.conf:/etc/postgresql/postgresql.conf
      - ./logs/postgres:/var/log/postgresql
    networks:
      - database-network

  zep:
    image: ghcr.io/getzep/zep:latest
    environment:
      - ZEP_STORE_TYPE=postgres  # Тип хранилища (postgres, sqlite, memory)
      - ZEP_POSTGRES_DSN=postgres://zep:zep@postgres-zep:5432/zep?sslmode=disable
      - ZEP_EXTRACTORS_DOCUMENTS_EXTRACT=true  # Включить извлечение документов
      - ZEP_EXTRACTORS_ENTITIES_EXTRACT=true   # Включить извлечение сущностей
      - ZEP_EXTRACTORS_INTENT_EXTRACT=true     # Включить извлечение намерений
      - ZEP_EXTRACTORS_SUMMARIZER_EXTRACT=true # Включить суммирование
      - ZEP_AUTH_ENABLED=false                 # Отключить авторизацию для тестирования
      - ZEP_OPENAI_API_KEY=${OPENAI_API_KEY}   # API-ключ OpenAI
    volumes:
      - zep_data:/data
      - ./zep-config.yaml:/app/config.yaml
      - ./logs/zep:/var/log/zep
    depends_on:
      - postgres-zep
      - embeddings-service
    ports:
      - "8000:8000"
    networks:
      - backend-network
      - database-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/healthz" ]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 20s

  postgres-zep:
    # Заменяем образ на pgvector/pgvector
    image: pgvector/pgvector:pg17
    restart: unless-stopped
    environment:
      - POSTGRES_USER=zep
      - POSTGRES_PASSWORD=zep
      - POSTGRES_DB=zep
      - POSTGRES_HOST_AUTH_METHOD=trust
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_zep_data:/var/lib/postgresql/data
      - ./logs/postgres-zep:/var/log/postgresql
      - ./postgres-custom.conf:/etc/postgresql/postgresql.conf
    networks:
      - database-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U zep" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
      
  redis:
    image: docker.io/library/redis:alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    networks:
      - backend-network

  embeddings-service:
    image: ghcr.io/huggingface/text-embeddings-inference:cpu-latest
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/info"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    environment:
      - MODEL_ID=BAAI/bge-small-en-v1.5  # Модель для эмбеддингов
      - MODEL_FORMAT=pytorch
      - PORT=8080
    ports:
      - "8080:8080"
    networks:
      - backend-network

  weaviate:
    image: docker.io/semitechnologies/weaviate:1.30.1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s
    ports:
      - "8087:8080"
    environment:
      - QUERY_DEFAULTS_LIMIT=20
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=text2vec-openai
      - ENABLE_MODULES=text2vec-openai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate_data:/var/lib/weaviate
      - ./logs/weaviate:/var/log/weaviate
    networks:
      - backend-network

networks:
  frontend-network:
    # Сеть для внешнего доступа
  backend-network:
    # Сеть для внутренних сервисов
  database-network:
    # Сеть только для баз данных

volumes:
  n8n_data:
  postgres_data:
  postgres_zep_data:
  zep_data:
  redis_data:
  weaviate_data:
