---
# Роль n8n-setup - основные задачи

- name: Создание директории проекта
  file:
    path: "{{ project_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  tags: n8n-setup

- name: Клонирование репозитория проекта
  git:
    repo: "{{ git_repo }}"
    dest: "{{ project_dir }}"
    version: "{{ git_branch }}"
    force: yes
  become_user: "{{ ansible_user }}"
  tags: n8n-setup

- name: Создание необходимых директорий
  file:
    path: "{{ project_dir }}/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "logs/n8n"
    - "logs/zep"
    - "logs/postgres"
    - "logs/postgres-zep"
    - "logs/nginx"
    - "logs/redis"
    - "logs/weaviate"
    - "nginx/certs"
    - "backups"
  tags: n8n-setup

- name: Создание .env файла
  template:
    src: env.j2
    dest: "{{ project_dir }}/.env"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'
  tags: n8n-setup

# Проверка наличия сертификатов в ansible/ssl
- name: Проверка наличия сертификата Cloudflare в ansible/ssl
  stat:
    path: "{{ playbook_dir }}/ssl/microcore.cc.pem"
  register: cloudflare_cert_stat
  tags: n8n-setup

- name: Проверка наличия приватного ключа Cloudflare в ansible/ssl
  stat:
    path: "{{ playbook_dir }}/ssl/microcore.cc.key"
  register: cloudflare_key_stat
  tags: n8n-setup

- name: Копирование существующего сертификата Cloudflare для NGINX
  copy:
    src: "{{ playbook_dir }}/ssl/microcore.cc.pem"
    dest: "{{ project_dir }}/nginx/certs/server.crt"
    mode: '0644'
  when: cloudflare_cert_stat.stat.exists
  tags: n8n-setup

- name: Копирование существующего ключа Cloudflare для NGINX
  copy:
    src: "{{ playbook_dir }}/ssl/microcore.cc.key"
    dest: "{{ project_dir }}/nginx/certs/server.key"
    mode: '0600'
  when: cloudflare_key_stat.stat.exists
  tags: n8n-setup

- name: Создание SSL сертификатов, если они еще не существуют
  shell: |
    if [ ! -f {{ project_dir }}/nginx/certs/server.crt ]; then
      openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout {{ project_dir }}/nginx/certs/server.key \
        -out {{ project_dir }}/nginx/certs/server.crt \
        -subj "/C=RU/ST=State/L=City/O=Organization/CN=localhost"
    fi
  args:
    executable: /bin/bash
    creates: "{{ project_dir }}/nginx/certs/server.crt"
  when: not cloudflare_cert_stat.stat.exists or not cloudflare_key_stat.stat.exists
  tags: n8n-setup

- name: Проверка успешного клонирования репозитория
  stat:
    path: "{{ project_dir }}/setup.sh"
  register: repo_check
  tags: n8n-setup

- name: Вывод информации о репозитории
  debug:
    msg: "Репозиторий {{ 'успешно клонирован' if repo_check.stat.exists else 'не удалось клонировать' }}"
  tags: n8n-setup

# Создаем необходимые скрипты, если они отсутствуют
- name: Проверка наличия основных скриптов
  stat:
    path: "{{ project_dir }}/{{ item }}"
  loop:
    - "setup.sh"
    - "make-scripts-executable.sh"
    - "fix-issues.sh"
    - "rotate-logs.sh"
    - "check-system.sh"
    - "import-templates.sh"
  register: script_checks
  tags: n8n-setup

- name: Создание простого скрипта make-scripts-executable.sh, если он отсутствует
  copy:
    dest: "{{ project_dir }}/make-scripts-executable.sh"
    content: |
      #!/bin/bash

      # Делаем скрипты исполняемыми
      chmod +x setup.sh
      chmod +x fix-issues.sh
      chmod +x rotate-logs.sh
      chmod +x check-system.sh
      chmod +x import-templates.sh

      echo "Все скрипты сделаны исполняемыми."
      echo "После этого можно запустить ./setup.sh для инициализации проекта."
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  when: script_checks.results[1].stat.exists == false
  tags: n8n-setup

- name: Копирование улучшенного скрипта setup.sh
  copy:
    src: setup.sh
    dest: "{{ project_dir }}/setup.sh"
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  tags: n8n-setup

- name: Создание других скриптов, если они отсутствуют
  copy:
    dest: "{{ project_dir }}/{{ item.path }}"
    content: "{{ item.content }}"
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  loop:
    - { path: "fix-issues.sh", content: |
        #!/bin/bash

        echo "Применение исправлений и улучшений..."

        # Создание необходимых директорий
        mkdir -p logs/n8n logs/zep logs/postgres logs/postgres-zep logs/nginx logs/redis logs/weaviate nginx/certs backups

        # Делаем все скрипты исполняемыми
        find . -type f -name "*.sh" -exec chmod +x {} \;

        echo "Все исправления применены."
      }
    - { path: "check-system.sh", content: |
        #!/bin/bash

        echo "Проверка системы n8n супер-агента..."

        # Проверка запущенных контейнеров
        echo -e "\n=== Проверка запущенных контейнеров ==="
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

        echo -e "\n=== Проверка завершена ==="
        echo "Если все сервисы запущены, система готова к использованию."
        echo "Откройте https://localhost в браузере для доступа к интерфейсу n8n."
      }
    - { path: "rotate-logs.sh", content: |
        #!/bin/bash

        # Скрипт для ротации и архивирования логов

        # Директории для логов
        LOG_DIRS=(
          "logs/n8n"
          "logs/zep"
          "logs/postgres"
          "logs/postgres-zep"
          "logs/nginx"
          "logs/redis"
          "logs/weaviate"
        )

        # Создаем директории для логов, если они не существуют
        for dir in "${LOG_DIRS[@]}"; do
          mkdir -p "$dir"
        done

        # Функция для ротации логов в директории
        rotate_logs_in_dir() {
          local dir=$1
          local max_size=$2  # в МБ
          local max_age=$3   # в днях
          
          echo "Обработка директории: $dir"
          
          # Ротация больших файлов
          find "$dir" -type f -name "*.log" -size +"$max_size"M 2>/dev/null | while read log; do
            timestamp=$(date +%Y%m%d-%H%M%S)
            echo "Ротация файла: $log (больше $max_size МБ)"
            mv "$log" "${log%.log}-${timestamp}.log"
            gzip "${log%.log}-${timestamp}.log"
          done
          
          # Удаление старых архивов
          find "$dir" -type f -name "*.gz" -mtime +"$max_age" 2>/dev/null | while read old_log; do
            echo "Удаление старого архива: $old_log (старше $max_age дней)"
            rm "$old_log"
          done
        }

        # Ротация логов для каждой директории
        # Параметры: директория, максимальный размер в МБ, максимальный возраст в днях
        rotate_logs_in_dir "logs/n8n" 50 30
        rotate_logs_in_dir "logs/zep" 50 30
        rotate_logs_in_dir "logs/postgres" 100 30
        rotate_logs_in_dir "logs/postgres-zep" 100 30
        rotate_logs_in_dir "logs/nginx" 50 30
        rotate_logs_in_dir "logs/redis" 20 30
        rotate_logs_in_dir "logs/weaviate" 50 30

        echo "Ротация логов завершена!"
      }
    - { path: "import-templates.sh", content: |
        #!/bin/bash

        # This script imports n8n workflow templates using the provided API key

        # Set the API key
        N8N_API_KEY=$(cat .n8n_api_key 2>/dev/null || echo "")

        if [ -z "$N8N_API_KEY" ]; then
          echo "WARNING: API key not found in .n8n_api_key file."
          echo "Please create this file with your n8n API key before importing templates."
          exit 1
        fi

        # Directory containing the template files
        TEMPLATES_DIR="./workflows/templates"

        # Create directory if it doesn't exist
        mkdir -p "$TEMPLATES_DIR"

        # Function for logging
        function log {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
        }

        log "Starting template import with provided API key..."

        # Check if there are any templates
        if [ ! "$(ls -A $TEMPLATES_DIR 2>/dev/null)" ]; then
          echo "No template files found in $TEMPLATES_DIR."
          echo "Please add your workflow template JSON files to this directory."
          exit 0
        fi

        # Import each template
        for template in "$TEMPLATES_DIR"/*.json; do
            if [ -f "$template" ]; then
                filename=$(basename -- "$template")
                log "Importing template: $filename"
                
                result=$(curl -X POST "http://localhost:5678/rest/workflows" \
                  -H "X-N8N-API-KEY: $N8N_API_KEY" \
                  -H "Content-Type: application/json" \
                  -d @"$template" -s)
                
                # Check if import was successful
                if echo "$result" | grep -q "\"id\":"; then
                    log "✅ Successfully imported $filename"
                else
                    log "❌ Failed to import $filename: $result"
                fi
            fi
        done

        log "Template import completed!"
      }
  when: "item.path not in script_checks.results | map(attribute='item') | list or
        (script_checks.results | selectattr('item', 'equalto', item.path) | map(attribute='stat.exists') | list | first == false)"
  loop_control:
    label: "{{ item.path }}"
  tags: n8n-setup

- name: Установка прав выполнения для скриптов, если они существуют
  file:
    path: "{{ project_dir }}/{{ item }}"
    mode: '0755'
  loop:
    - "setup.sh"
    - "rotate-logs.sh"
    - "check-system.sh"
    - "fix-issues.sh"
    - "import-templates.sh"
    - "make-scripts-executable.sh"
  when: "item in script_checks.results | map(attribute='item') | list and
        (script_checks.results | selectattr('item', 'equalto', item) | map(attribute='stat.exists') | list | first == true)"
  tags: n8n-setup

# Проверка версии Docker для определения формата команд docker-compose
- name: Проверка версии Docker
  command: docker --version
  register: docker_version
  changed_when: false
  failed_when: false
  tags: n8n-setup

- name: Проверка наличия docker-compose
  command: which docker-compose
  register: docker_compose_check
  changed_when: false
  failed_when: false
  tags: n8n-setup

- name: Проверка наличия docker compose plugin
  command: docker compose version
  register: docker_compose_plugin
  changed_when: false
  failed_when: false
  tags: n8n-setup

- name: Определение формата команды docker-compose
  set_fact:
    docker_compose_cmd: "{{ 'docker-compose' if docker_compose_check.rc == 0 else 'docker compose' }}"
  tags: n8n-setup

- name: Проверка уже установленных контейнеров
  shell: "{{ docker_compose_cmd }} ls 2>/dev/null || docker ps -a --format '{{.Names}}' | grep -q n8n"
  register: docker_check
  failed_when: false
  changed_when: false
  tags: n8n-setup

- name: Проверка наличия файла .n8n_api_key
  stat:
    path: "{{ project_dir }}/.n8n_api_key"
  register: api_key_file
  tags: n8n-setup

# Обновление Makefile для поддержки разных версий Docker Compose
- name: Проверка и обновление Makefile (если используется)
  block:
    - name: Проверка наличия Makefile
      stat:
        path: "{{ project_dir }}/Makefile"
      register: makefile_check
      tags: n8n-setup

    - name: Чтение содержимого Makefile
      slurp:
        src: "{{ project_dir }}/Makefile"
      register: makefile_content
      when: makefile_check.stat.exists
      tags: n8n-setup

    - name: Обновление Makefile для поддержки обеих версий docker-compose
      replace:
        path: "{{ project_dir }}/Makefile"
        regexp: 'docker-compose'
        replace: "{{ docker_compose_cmd }}"
      when: 
        - makefile_check.stat.exists
        - docker_compose_cmd == "docker compose"
        - "'docker-compose' in (makefile_content.content | b64decode)"
      tags: n8n-setup

    - name: Обновление Makefile для передачи аргументов в setup.sh
      replace:
        path: "{{ project_dir }}/Makefile"
        regexp: '\./setup\.sh(\s*)$'
        replace: './setup.sh $(SETUP_ARGS)\1'
      when: makefile_check.stat.exists
      tags: n8n-setup
  when: makefile_check is defined and makefile_check.stat is defined
  ignore_errors: yes

# Создание простого запускающего скрипта, если make недоступен
- name: Создание простого скрипта запуска docker-compose
  copy:
    dest: "{{ project_dir }}/run-compose.sh"
    content: |
      #!/bin/bash
      cd "$(dirname "$0")"
      {{ docker_compose_cmd }} up -d
    mode: '0755'
  tags: n8n-setup

- name: Запуск проекта через make setup или setup.sh напрямую
  block:
    - name: Запуск через make setup (если Makefile доступен)
      command: make setup
      args:
        chdir: "{{ project_dir }}"
      become_user: "{{ ansible_user }}"
      register: setup_result
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
      when: makefile_check.stat.exists
      failed_when: false

    - name: Запуск напрямую через setup.sh (если make недоступен или возникла ошибка)
      command: "./setup.sh {{ '--skip-certs' if cloudflare_cert_stat.stat.exists and cloudflare_key_stat.stat.exists else '' }}"
      args:
        chdir: "{{ project_dir }}"
      become_user: "{{ ansible_user }}"
      when: not makefile_check.stat.exists or (setup_result is defined and setup_result.rc != 0)
  when: docker_check.rc != 0 or not api_key_file.stat.exists
  retries: 2
  delay: 30
  tags: n8n-setup

- name: Проверка запущенных контейнеров
  command: docker ps
  register: docker_status
  changed_when: false
  tags: n8n-setup

- name: Вывод информации о запущенных контейнерах
  debug:
    var: docker_status.stdout_lines
  tags: n8n-setup

- name: Проверка работоспособности системы
  command: "{{ project_dir }}/check-system.sh"
  become_user: "{{ ansible_user }}"
  register: check_result
  ignore_errors: yes
  tags: n8n-setup

- name: Вывод результатов проверки системы
  debug:
    var: check_result.stdout_lines
  when: check_result is not failed
  tags: n8n-setup

- name: Настройка ротации логов
  cron:
    name: "Ротация логов n8n-super-agent"
    user: "{{ ansible_user }}"
    job: "cd {{ project_dir }} && ./rotate-logs.sh > /dev/null 2>&1"
    hour: "2"
    minute: "0"
  when: enable_backups
  tags: n8n-setup, maintenance

- name: Настройка резервного копирования
  cron:
    name: "Резервное копирование n8n-super-agent"
    user: "{{ ansible_user }}"
    job: "cd {{ project_dir }} && make backup > /dev/null 2>&1"
    cron_file: n8n-super-agent-backup
    hour: "3"
    minute: "0"
  when: enable_backups
  tags: n8n-setup, maintenance

- name: Настройка очистки старых резервных копий
  cron:
    name: "Очистка старых резервных копий n8n-super-agent"
    user: "{{ ansible_user }}"
    job: "find {{ backup_dir }} -type f -name '*.sql' -mtime +{{ backup_retention_days }} -delete; find {{ backup_dir }} -type f -name '*.tar.gz' -mtime +{{ backup_retention_days }} -delete"
    cron_file: n8n-super-agent-backup-cleanup
    hour: "4"
    minute: "0"
  when: enable_backups
  tags: n8n-setup, maintenance