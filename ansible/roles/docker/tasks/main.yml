---
# Роль Docker - основные задачи

- name: Проверка наличия Docker
  command: docker --version
  register: docker_version_check
  failed_when: false
  changed_when: false
  tags: docker

- name: Проверка типа дистрибутива
  debug:
    msg: "Дистрибутив: {{ ansible_distribution }}, Версия: {{ ansible_distribution_version }}, Релиз: {{ ansible_distribution_release | default('не определен') }}"
  tags: docker

# Установка необходимых зависимостей
- name: Установка pip и других зависимостей
  apt:
    name:
      - python3-pip
      - python3-setuptools
      - python3-dev
      - build-essential
    state: present
  when: ansible_os_family == "Debian"
  ignore_errors: yes
  tags: docker

# Вариант 1: Установка docker.io (более простой способ, работает на большинстве дистрибутивов)
- name: Установка Docker через пакет docker.io
  apt:
    name:
      - docker.io
      - docker-compose
    state: present
    update_cache: yes
  register: docker_io_install
  failed_when: false
  when: ansible_os_family == "Debian" and docker_version_check.rc != 0
  tags: docker
  
# Вариант 2: Более сложная установка с docker-ce если первый способ не сработал
- name: Создание директории для ключей
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  when: 
    - ansible_os_family == "Debian" 
    - docker_version_check.rc != 0 
    - docker_io_install is defined 
    - docker_io_install.failed is defined
  tags: docker

- name: Скачивание ключа GPG Docker
  get_url:
    url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
    dest: /tmp/docker.gpg
  when: 
    - ansible_os_family == "Debian" 
    - docker_version_check.rc != 0 
    - docker_io_install is defined 
    - docker_io_install.failed is defined
  tags: docker

- name: Установка ключа GPG Docker с выводом ошибок
  shell: |
    cat /tmp/docker.gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg
  when: 
    - ansible_os_family == "Debian" 
    - docker_version_check.rc != 0 
    - docker_io_install is defined 
    - docker_io_install.failed is defined
  tags: docker
  register: gpg_result
  failed_when: false

- name: Вывод ошибок GPG, если есть
  debug:
    var: gpg_result
  when: gpg_result is defined and gpg_result.stderr | default('') != ''
  tags: docker

- name: Альтернативная установка ключа GPG Docker
  apt_key:
    url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
    state: present
  when: 
    - ansible_os_family == "Debian" 
    - docker_version_check.rc != 0 
    - docker_io_install is defined 
    - docker_io_install.failed is defined 
    - gpg_result is defined 
    - gpg_result.rc != 0
  tags: docker

- name: Добавление репозитория Docker (Ubuntu/Debian)
  apt_repository:
    repo: "deb [arch={{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
  when: 
    - ansible_os_family == "Debian" 
    - docker_version_check.rc != 0 
    - docker_io_install is defined 
    - docker_io_install.failed is defined 
    - gpg_result is defined 
    - gpg_result.rc == 0
  tags: docker

- name: Альтернативный способ добавления репозитория Docker
  apt_repository:
    repo: "deb [arch={{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
  when: 
    - ansible_os_family == "Debian" 
    - docker_version_check.rc != 0 
    - docker_io_install is defined 
    - docker_io_install.failed is defined 
    - gpg_result is defined 
    - gpg_result.rc != 0
  tags: docker

- name: Обновление кэша apt после добавления репозитория
  apt:
    update_cache: yes
  when: 
    - ansible_os_family == "Debian" 
    - docker_version_check.rc != 0 
    - docker_io_install is defined 
    - docker_io_install.failed is defined
  tags: docker

# Проверка доступности пакетов Docker
- name: Проверка доступности пакетов Docker
  shell: apt-cache policy docker-ce
  register: docker_pkg_check
  changed_when: false
  failed_when: false
  when: 
    - ansible_os_family == "Debian" 
    - docker_version_check.rc != 0 
    - docker_io_install is defined 
    - docker_io_install.failed is defined
  tags: docker

- name: Вывод информации о пакетах Docker
  debug:
    var: docker_pkg_check.stdout_lines
  when: docker_pkg_check is defined
  tags: docker

# Установка Docker CE если доступно
- name: Установка Docker CE и Docker Compose
  apt:
    name:
      - docker-ce 
      - docker-ce-cli
      - containerd.io
      - docker-compose-plugin
    state: present
    update_cache: yes
  register: docker_ce_install
  failed_when: false
  when: 
    - ansible_os_family == "Debian" 
    - docker_version_check.rc != 0 
    - docker_io_install is defined 
    - docker_io_install.failed is defined 
    - docker_pkg_check is defined 
    - "'Installed: (none)' in docker_pkg_check.stdout"
  notify: restart docker
  tags: docker

# Общие задачи независимо от дистрибутива
- name: Настройка параметров Docker daemon
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m",
          "max-file": "3"
        },
        "default-address-pools": [
          {"base": "172.17.0.0/16", "size": 24}
        ]
      }
    mode: '0644'
    owner: root
    group: root
  notify: reload docker
  when: docker_version_check.rc != 0
  ignore_errors: yes
  tags: docker

- name: Включение и запуск службы Docker
  service:
    name: docker
    state: started
    enabled: yes
  tags: docker
  ignore_errors: yes

# Проверка наличия pip3
- name: Проверка наличия pip3
  command: pip3 --version
  register: pip3_check
  failed_when: false
  changed_when: false
  tags: docker

- name: Установка python пакетов через apt
  apt:
    name:
      - python3-pip
      - python3-setuptools
      - python3-venv
      - python3-docker
      - pipx
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"
  ignore_errors: yes
  tags: docker

# Установка docker-compose через apt
- name: Проверка доступности docker-compose через apt
  shell: apt-cache policy docker-compose
  register: docker_compose_apt_check
  changed_when: false
  failed_when: false
  tags: docker

- name: Установка docker-compose через apt
  apt:
    name: docker-compose
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian" and (docker_compose_apt_check.rc == 0) and ('(none)' not in docker_compose_apt_check.stdout)
  ignore_errors: yes
  tags: docker
  
- name: Альтернативная установка docker-compose через pipx
  shell: |
    if ! command -v pipx &> /dev/null; then
      apt-get update && apt-get install -y pipx
    fi
    pipx ensurepath
    pipx install docker-compose
  args:
    creates: /root/.local/bin/docker-compose
  register: pipx_install
  when: 
    - ansible_os_family == "Debian" 
    - (docker_compose_apt_check.rc != 0) or ('(none)' in docker_compose_apt_check.stdout)
  ignore_errors: yes
  tags: docker

- name: Создание символической ссылки на docker-compose установленный через pipx
  file:
    src: /root/.local/bin/docker-compose
    dest: /usr/bin/docker-compose
    state: link
  when: pipx_install is defined and pipx_install.rc == 0
  ignore_errors: yes
  tags: docker

# Проверка наличия docker-compose
- name: Проверка наличия docker-compose
  command: which docker-compose
  register: docker_compose_check
  failed_when: false
  changed_when: false
  tags: docker

# Альтернативная установка docker-compose напрямую через curl
- name: Альтернативная установка docker-compose
  block:
    - name: Скачивание docker-compose
      get_url:
        url: https://github.com/docker/compose/releases/download/v2.22.0/docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture | replace('x86_64', 'amd64') | replace('aarch64', 'arm64') }}
        dest: /usr/local/bin/docker-compose
        mode: '0755'
      
    - name: Создание символической ссылки
      file:
        src: /usr/local/bin/docker-compose
        dest: /usr/bin/docker-compose
        state: link
  when: 
    - docker_compose_check.rc != 0 
    - (docker_compose_apt_check.rc != 0 or '(none)' in docker_compose_apt_check.stdout)
    - ansible_os_family == "Debian"
  ignore_errors: yes
  tags: docker

# Добавление пользователя в группу docker
- name: Проверка существования группы docker
  getent:
    database: group
    key: docker
  register: docker_group_exists
  changed_when: false
  ignore_errors: yes
  tags: docker

- name: Создание группы docker, если она не существует
  group:
    name: docker
    state: present
  when: docker_group_exists is failed or docker_group_exists.ansible_facts.getent_group.docker is not defined
  tags: docker

- name: Добавление пользователя в группу docker
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  register: docker_group_add
  tags: docker

- name: Альтернативное добавление в группу docker через usermod
  shell: usermod -aG docker {{ ansible_user }}
  register: docker_usermod_add
  when: docker_group_add is failed
  failed_when: false  # Игнорируем ошибки, чтобы не прерывать плейбук
  tags: docker

- name: Проверка прав на docker.sock
  file:
    path: /var/run/docker.sock
    mode: '0666'
  register: docker_sock_perm
  ignore_errors: yes
  tags: docker

- name: Создание systemd оверрайда для установки прав на сокет docker.sock при запуске
  block:
    - name: Создание директории для systemd override
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
        mode: '0755'
    
    - name: Создание файла override.conf
      copy:
        dest: /etc/systemd/system/docker.service.d/override.conf
        content: |
          [Service]
          ExecStartPost=/bin/chmod 666 /var/run/docker.sock
        mode: '0644'
  when: docker_sock_perm is failed
  notify: systemd daemon-reload
  tags: docker

- name: Добавление скрипта для активации группы docker при входе
  lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: '# Добавление в группу docker
if [ $(id -gn) != "docker" ] && id -nG "$USER" | grep -qw "docker"; then
  echo "Активация группы docker..."
  exec sg docker -c "$SHELL"
fi'
    state: present
  when: docker_group_add.changed or docker_usermod_add is changed
  tags: docker

- name: Создание одноразового скрипта для активации группы docker
  copy:
    dest: "{{ ansible_env.HOME }}/activate-docker-group.sh"
    content: |
      #!/bin/bash
      echo "Активация группы docker..."
      newgrp docker
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  when: docker_group_add.changed or docker_usermod_add is changed
  tags: docker

- name: Мгновенная настройка прав на сокет docker
  shell: chmod 666 /var/run/docker.sock
  changed_when: false
  ignore_errors: yes
  tags: docker

- name: Вывод инструкции для пользователя
  debug:
    msg: 
      - "Пользователь добавлен в группу docker. Для применения изменений необходимо:"
      - "1. Выполнить команду: ./activate-docker-group.sh"
      - "2. Или перезапустить сессию командой: su - {{ ansible_user }}"
      - "3. Или перезагрузить сервер"
      - "4. Также можно временно использовать sudo с докер-командами: sudo docker ps"
  when: docker_group_add.changed or docker_usermod_add is changed
  tags: docker

# Перезапуск Docker если были изменения в правах
- name: Перезапуск Docker для применения изменений прав на сокет
  service:
    name: docker
    state: restarted
  when: docker_sock_perm is failed or (docker_group_add.changed is defined and docker_group_add.changed) or (docker_usermod_add.changed is defined and docker_usermod_add.changed)
  tags: docker