/**
 * Пример использования оптимизации промптов
 */
const PromptOptimizer = require('../lib/prompt-optimizer');

// Тестовые промпты
const testPrompts = [
  {
    name: 'Длинный промпт',
    text: `Вы - полезный ассистент, который всегда готов помочь пользователю. Вы всегда стараетесь предоставить наиболее полезную и точную информацию. Вы очень умный и знающий, и вы всегда стараетесь давать наиболее полные и содержательные ответы на вопросы пользователя. Ваши ответы всегда должны быть полезными, точными, краткими, но в то же время достаточно детальными, чтобы пользователь получил полное понимание предмета. Вы никогда не должны выдумывать информацию или давать неточные ответы. Если вы не знаете ответа на вопрос, вы должны честно признаться в этом. Пожалуйста, помогите пользователю с его запросом: Какие есть современные методы машинного обучения для обработки текста?`
  },
  {
    name: 'Многословный промпт',
    text: `Я бы хотел, чтобы вы выступили в роли очень опытного и исключительно квалифицированного эксперта в области программирования на Python, который может очень подробно и детально объяснить, как реализовать алгоритм быстрой сортировки в Python, включая все необходимые детали, и предоставить очень подробные комментарии к каждой строке кода, чтобы даже начинающий программист мог полностью понять, как работает этот алгоритм.`
  },
  {
    name: 'Обычный промпт',
    text: `Расскажите о преимуществах и недостатках электромобилей по сравнению с автомобилями с двигателем внутреннего сгорания.`
  }
];

// Тестирование различных режимов оптимизации
function testOptimization() {
  const modes = ['minimal', 'normal', 'detailed'];
  
  for (const prompt of testPrompts) {
    console.log(`\n========== ${prompt.name} ==========`);
    console.log(`Оригинал (${prompt.text.length} символов):\n${prompt.text}\n`);
    
    for (const mode of modes) {
      const result = PromptOptimizer.optimizePrompt(prompt.text, mode);
      console.log(`\n----- Режим: ${mode} -----`);
      console.log(`Оптимизированный (${result.optimized_length} символов, -${result.reduction_percent}%):\n${result.optimized}\n`);
    }
  }
}

// Тестирование выбора модели
function testModelSelection() {
  // Тестовые запросы различной сложности
  const queries = [
    {
      text: 'Какая погода сегодня в Москве?',
      context: ''
    },
    {
      text: 'Объясни, как работает алгоритм быстрой сортировки и почему он эффективнее пузырьковой сортировки.',
      context: 'Пользователь изучает алгоритмы и структуры данных.'
    },
    {
      text: 'Проанализируй влияние квантовых вычислений на современную криптографию и предложи стратегии защиты от квантовых атак.',
      context: 'Это важный вопрос безопасности для нашей компании. Нам нужен подробный технический анализ.'
    }
  ];
  
  console.log('\n========== Выбор моделей ==========');
  
  for (const query of queries) {
    console.log(`\n----- Запрос: ${query.text.substring(0, 50)}... -----`);
    
    // Тестируем разные требования к точности
    for (const accuracy of ['low', 'normal', 'high']) {
      const selection = PromptOptimizer.selectModelByComplexity(query.text, query.context, { accuracy });
      
      console.log(`Точность '${accuracy}': выбрана модель '${selection.selected_model}'`);
      console.log(`  Сложность запроса: ${selection.assessments.query_complexity}`);
      console.log(`  Важность контекста: ${selection.assessments.context_importance}`);
    }
  }
}

// Запускаем тесты
console.log('=== ТЕСТИРОВАНИЕ ОПТИМИЗАЦИИ ПРОМПТОВ ===');
testOptimization();

console.log('\n\n=== ТЕСТИРОВАНИЕ ВЫБОРА МОДЕЛЕЙ ===');
testModelSelection();
